<apex:page standardStyleSheets="false" lightningStyleSheets="true" showheader="false" controller="APTSMD_CostProfitAnalysisCtrl" action="{!init}">
    <html ng-app="myApp" ng-clock="">
    <head>
        <title>Contextual Pricing Analysis</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-route.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-animate.js"></script>
        <script src="https://cdn.gitcdn.link/cdn/angular/bower-material/v1.1.1/angular-material.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-aria.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-messages.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-resource.js"></script>
        <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        <script src="https://code.highcharts.com/highcharts.js"></script>
        <script src="https://code.highcharts.com/highcharts-more.js"></script>
        <script src="https://code.highcharts.com/modules/exporting.js"></script>

        <link href="https://cdn.gitcdn.link/cdn/angular/bower-material/v1.1.1/angular-material.css" rel="stylesheet" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/angular-material-data-table/0.10.10/md-data-table.css" rel="stylesheet" />
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <apex:stylesheet value="{!URLFOR($Resource.APTSMD_scatterplot, 'nova.min.css')}" />
        
        <style>
            .ands-app-bar {
                background-color: #222 !important;
                height: 40px !important;
            }

            .input-container-dir {
                width: 95% !important;
            }

            .g-ytitle {
                margin-right: 10px;
            }

            body, md-content {
                background-color: #FFFFFF !important;
            }



            md-tabs:not(.md-no-tab-content):not(.md-dynamic-height) {
                min-height: 430px;
            }


            .header-first {
                padding-left: 20px;
            }

            .header-field {
                padding: 10px;
            }

            .header-button {
            }

            button {
                text-transform: none !important;
            }

            md-tab-item {
                text-transform: none !important;
            }

            .filter-field {
                padding: 5px;
                max-height: 100px !important;
            }

            .filter-container {
                border-right: 3px rgba(156, 158, 168, 0.34) solid;
            }

            .divider {
                border-right: 3px rgba(156, 158, 168, 0.34) solid;
            }

            .chart-div {
                //max-height : 325px !important;
            }

            .md-tabs-content-wrapper {
                margin-top: 3px;
            }

            .input-label {
                font-size: 1.1em !important;
            }


            .selectdemoSelectHeader {
                /* Please note: All these selectors are only applied to children of elements with the 'selectdemoSelectHeader' class */
            }

            .demo-header-searchbox {
                border: none;
                outline: none;
                height: 100%;
                width: 100%;
                padding: 0;
            }

            .demo-select-header {
                box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.1), 0 0 0 0 rgba(0, 0, 0, 0.14), 0 0 0 0 rgba(0, 0, 0, 0.12);
                padding-left: 10.667px;
                height: 48px;
                cursor: pointer;
                position: relative;
                display: flex;  
                align-items: center;
                width: auto;
            }

            .selectdemoSelectHeader {
                max-height: 240px;
            }

            .md-select-menu .md-content .md-option[selected], .md-select-menu .md-content .md-option:focus[selected] {
                background-color: #FFFFFF;
            }


            .md-checkbox-enabled .md-default-theme[selected] .md-icon, .md-checkbox-enabled[selected] .md-icon {
                background-color: rgba(59,161,217,0.87);
            }

            .ands-app-bar-logo2 {
                display: inline;
                padding: 0;
                margin: 0;
                width: 5.9375rem;
                height: 1.125rem;
                white-space: nowrap;
                background: url(https://c.na40.visual.force.com/resource/1498024792000/scatterplot/images/ands-logo.png) center;
                text-indent: -9999px;
            }
            .moved {
                margin-top: 83px;
            }
            
            .md-select {
                font-size: 14px !important;
            }
            .label.input-label.md-required {
                font-size: 14px !important;
            }
            .md-input-container.input-container-dir.md-input-has-value {
                font-size: 14px !important;
            }
            .filter-field.flex-10 {
                font-size: 14px !important;
            }
            .label.input-label.ands-label.md-required {
                font-size: 14px !important;
            }


            .md-checkbox-enabled.md-default-theme[selected] .md-icon:after, .md-checkbox-enabled[selected] .md-icon:after {
                border-color: rgba(27, 82, 151, 1);
            }
            .md-checkbox-enabled.md-default-theme[selected] .md-icon:after, .md-checkbox-enabled[selected] .md-icon:after {
                border-color: rgba(27, 82, 151, 1);     
            }
            .md-text.ng-binding {
                font-size: 14px !important;
            }
            .md-option {
                font-size: 14px !important;
            }


        </style>
        <script>
        var myApp = angular.module('myApp', ['ngMaterial', 'ngMessages', 'ngAnimate', 'ngRoute']);
        var fontAdder = 120;

        myApp.config(function ($mdThemingProvider) {
            var andsBluePalette = {
                '50': 'f2fafd',
                '100': 'f2fafd',
                '200': 'ddf0f9',
                '300': 'b2ddf1',
                '400': '78c0e5',
                '500': '3ba1d9',
                '600': '387698',
                '700': '366077',
                '800': '354b57',
                '900': '42484B',
                'A700': '3ba1d9'
            };

            var andsRedPalette = {
                '50': 'faccd7',
                '100': 'faccd7',
                '200': 'f699b0',
                '300': 'c92b52',
                '400': 'ed3361',
                '500': 'e9003a',
                '600': 'ad1c3b',
                '700': '8c233d',
                '800': '56212e',
                '900': '473C3E',
                'A700': 'e9003a'
            };

            var andsBlueMap = $mdThemingProvider.extendPalette('blue', andsBluePalette);
            var andsRedMap = $mdThemingProvider.extendPalette('red', andsRedPalette);

            $mdThemingProvider.definePalette('andsBlue', andsBlueMap);
            $mdThemingProvider.definePalette('andsRed', andsRedMap);

            $mdThemingProvider.theme('default')
                .primaryPalette('andsBlue')
                .accentPalette('light-blue')
                .warnPalette('andsRed');
        });

        var windowHeight = document.body.offsetHeight;
        var windowWidth =  document.body.offsetWidth;
        var chartHeight = windowHeight * 0.50 + (windowHeight > 700 ? (windowHeight - 910) : 0 ) + fontAdder; //890
        var chartWidth = windowWidth * 0.72;
        var tabHeight =  chartHeight + chartHeight * 0.25 + fontAdder;
        var _chart1;
        var _chart2;
        var _chart3;
        var _chart4;
        var _chart5;
        var _chart6;
        var selectedShipToName = '';
        var currentAnnualVolume = '';
        var currentDeliveryPriority= '';


        var getHistoricalDataset = function(materialNo,lookBack){
            var url = '{!$RemoteAction.APTSMD_CostProfitAnalysisCtrl.getData}';
            var deferred = _q.defer();
            Visualforce.remoting.Manager.invokeAction(url,materialNo,lookBack,
            function(result, event) {
                deferred.resolve(result);
            });

            var _promise = deferred.promise;
            return _promise;
         }


         var getAnnualVolume = function(shipToName){
            var url = '{!$RemoteAction.APTSMD_CostProfitAnalysisCtrl.getAnnualVolume}';
            var deferred = _q.defer();
            Visualforce.remoting.Manager.invokeAction(url,shipToName,
            function(result, event) {
                deferred.resolve(result);
            });

            var _promise = deferred.promise;
            return _promise;
         }

         var getHistoricalSummaryDataset = function(materialNo,lookBack){
            var url = '{!$RemoteAction.APTSMD_CostProfitAnalysisCtrl.getSummaryData}';
            var deferred = _q.defer();
            Visualforce.remoting.Manager.invokeAction(url,materialNo,lookBack,
            function(result, event) {
                deferred.resolve(result);
            });

            var _promise = deferred.promise;
            return _promise;
         }

        var getMaterialDataSet = function(materialNumber,lookBack){
            var _dataset = [];
            if(!checkString(lookBack)){
                _dataset = filterDataSet(mainDataSet,{property : configData.materialNumber, type:'eq', value : materialNumber});
            }
            else{
                _dataset = filterDataSet(mainDataSet,{property : configData.materialNumber, type:'eq', value : materialNumber});
            }

            return _dataset;
        }
        var configData = {
            salesOrg : 'salesOrg',
            plant : 'plant',
            quantity : 'quantity',
            price : 'price',
            materialNumber : 'materialNo',
            shipToName : 'shipToName',
            shipToDesc : 'shipToCode',
            priceDate : 'priceDate',
            annualVolume : 'annualVolume',
            deliveryPriority:'deliveryPriority'
        }

        var filterDataSet = function(dataList,filter){
              var filteredDataList = [];

              if(!dataList || dataList.length == 0){
                    return filteredDataList;
              }

              for(var i=0;i<dataList.length;i++){
                    var dataRecord = dataList[i];
                    if(filterSingleRecord(dataRecord,filter)){
                          filteredDataList.push(dataRecord);
                    }
              }
              return filteredDataList;
        }

        var filterSingleRecord = function(dataRecord, filter){
              if(filter.type =='in'){
                    var inValues = filter.value;
                    for(var i=0;i<inValues.length;i++){
                          var inValue = inValues[i];
                          if(inValue == dataRecord[filter.property]){
                                return true;
                          }
                    }
              }else if(filter.type =='eq'){
                    var eqValue = filter.value;
                    if(eqValue == dataRecord[filter.property]){
                          return true;
                    }
              }
            else if(filter.type =='ne'){
                    var eqValue = filter.value;
                    if(eqValue != dataRecord[filter.property]){
                          return true;
                    }
              }

              return false;
        }

        var prepareSet = function(dataList, propertyName){
              var uniqueDataSet = [];

              if(!dataList || dataList.length == 0){
                    return uniqueDataSet;
              }

              for(var i=0;i<dataList.length;i++){
                    var dataRecord = dataList[i];
                    var propertyValue = dataRecord[propertyName];

                    if(!uniqueDataSet.includes(propertyValue)){
                          uniqueDataSet.push(propertyValue);
                    }
              }
              return uniqueDataSet;
        }

        var getFilteredDataSet = function(dataset,materialNumber, shipToName){
              var materialDataList = filterDataSet(dataset, {property : configData.materialNumber, type:'eq', value : materialNumber});

              var shipToSet = prepareSet(dataset, configData.shipToName);
              var shipToExceptCurrent = shipToSet.splice(shipToSet.indexOf(shipToName),1);

              var customerDataList = filterDataSet(materialDataList, {property : configData.shipToName, type:'in', value : shipToSet });

              return customerDataList;
        }

        var getFilterDatasetForSalesAndPlant = function(dataset,salesOrg, plantName){
            var _dataset = dataset;
            if(salesOrg && salesOrg!=''){
                _dataset = filterDataSet(_dataset,{property : configData.salesOrg, type:'eq', value : salesOrg});
            }
            if(plantName && plantName!=''){
                _dataset = filterDataSet(_dataset,{property :configData.plant, type:'eq', value : plantName});
            }
            return _dataset;
        }

        var checkString =  function(val){
            return val!=undefined && val!='' && val!='Any';
        }

        var chartConfigScatter = {
        title : 'Price for Similar Customers',
        xTitle:'Order Quantity',
        yTitle:'Price per Unit (Euros)',
        container:'chart_div',
        xProperty:configData.quantity,
        yProperty:configData.price,
        tooltipFn:function(_datasetitem){
            return 'Customer :' +  _datasetitem[configData.shipToDesc] + '<br/>'+
                    'Order Quantity :'+ _datasetitem[configData.quantity]  + '<br/>'+
                    'Price (Per Unit)(€): ' +  _datasetitem[configData.price];
        },
        isAxisWiseArray : false,
        chartNo : 2

    }

    var chartConfigTime = {
            title : 'Sales to Other Customer',
            xTitle:'',
            yTitle:'Price Per Unit (Euros)',
            container:'chart_line',
            xProperty:configData.priceDate,
            yProperty:configData.price,
            isAxisWiseArray : true,
            chartNo : 1
        }

    var chartConfigChart3 = {
        title : 'Price for Similar Customers - Considering Customer Size',
        xTitle:' Annual Volume (Proxy for Customer Size)',
        yTitle:'Price Per Unit (Euros)',
        container:'chart_3',
        xProperty:configData.annualVolume,
        yProperty:configData.price,
        tooltipFn:function(_datasetitem){
            return 'Price Per Unit (Euros):' +  _datasetitem[configData.price] + '<br/>'+
                    'Annual Volume (Proxy for Customer Size):'+ _datasetitem[configData.annualVolume]  + '<br/>'+
                    'Customer:'+ _datasetitem[configData.shipToDesc] ;
        },
        isAxisWiseArray : false,
        chartNo : 3

    }

    var chartConfigChart4 = {
            title : 'Price for Similar Customers - Considering Delivery Priority',
            xTitle:' Annual Volume (Proxy for Customer Size)',
            yTitle:'Price Per Unit (Euros)',
            container:'chart_4',
            xProperty:configData.annualVolume,
            yProperty:configData.price,
            tooltipFn:function(_datasetitem){
               return '<b>Delivery Priority :' +  (_datasetitem[configData.deliveryPriority] ? _datasetitem[configData.deliveryPriority] : '-') + '</b><br/>'+
                    'Price Per Unit (Euros):' +  _datasetitem[configData.price] + '<br/>'+
                    ' Annual Volume (Proxy for Customer Size):'+ _datasetitem[configData.annualVolume]  + '<br/>'+
                    'Customer:'+ _datasetitem[configData.shipToDesc];
            },
            isAxisWiseArray : false,
        chartNo : 4

        }

    var chartConfigChart5 = {
        title : 'Price by Order Quantity for Similar Customers  - Considering Customer Size',
        xTitle:'Order Quantity',
        yTitle:'Price Per Unit (Euros)',
        container:'chart_5',
        xProperty:configData.quantity,
        yProperty:configData.price,
        bubbleProperty : configData.annualVolume,
        tooltipFn:function(_datasetitem){
            return 'Customer :' +  _datasetitem[configData.shipToDesc] + '<br/>'+
                    'Order Quantity :'+ _datasetitem[configData.quantity]  + '<br/>'+
                    'Price Per Unit (Euros):'+ _datasetitem[configData.price] + '<br/>'+
                    ' Annual Volume (Proxy for Customer Size): ' +  _datasetitem[configData.annualVolume];
        },
        isAxisWiseArray : false,
        chartNo : 5

    }
    var chartConfigChart6 = {
        title : 'Monthly Average Price by Monthly Total Order Quantity for Similar Customers',
        xTitle:'Monthly total order quantity ',
        yTitle:'Monthly Average Price Per Unit (Euros)',
        container:'chart_6',
        xProperty:'dimension1',
        yProperty:'dimension2',
        tooltipFn:function(_datasetitem){
            var comment = _datasetitem['Comment__c'];
            var shipToName = '';
            var existingShipToName = _datasetitem[configData.shipToName];
            if(!existingShipToName){
                if(comment && comment!=''){
                    var commentArr = comment.split('~');
                    if(commentArr.length>0){
                        shipToName = commentArr[0];
                    }
                }
            }
            else{
                shipToName = existingShipToName;
            }
            return 'Monthly total order quantity :' +  _datasetitem['dimension1'] + '<br/>'+
                    'Monthly Average Price Per Unit (Euros):'+ _datasetitem['dimension2']  + '<br/>'+
                    'Customer:'+ shipToMap[shipToName] ;
        },
        isAxisWiseArray : false,
        chartNo : 6

    }



        var shipToNameCode =  {!shipToOptions};
        var shipToNameList = [];
        var shipToMap = {};
        for(var i=0;i<  shipToNameCode.length;i++){
            var shipToNameCodeStr =   shipToNameCode[i];
            var shipToNameCodeArr = shipToNameCodeStr.split('@');
            var shipName = shipToNameCodeArr[0];
            var shipCode = shipToNameCodeArr[1];

            shipToNameList.push(shipName);
            shipToMap[shipName] = shipCode;
        }




                var materialToNameCode =  {!materialOptions};
                var materialToNameList = [];
                var materialToMap = {};
                for(var i=0;i< materialToNameCode.length;i++){
                    var materialToNameCodeStr =  materialToNameCode[i];
                    var materialToNameCodeArr = materialToNameCodeStr.split('@');
                    var materialName = materialToNameCodeArr[1];
                    var materialCode = materialToNameCodeArr[0];

                    materialToNameList.push(materialCode);
                    materialToMap[materialCode] = materialName;
                }

    var industryCodeMap = {};
    industryCodeMap['0223'] = 'Automotive';
    industryCodeMap['0493'] = 'Consumer Products';
    industryCodeMap['6378'] = 'Aviation';
    industryCodeMap['2187'] = 'Healthcare';





        var _q;
        function AppController($scope,$q,$element,$timeout){
            $element.find('input').on('keydown', function(ev) {
                  ev.stopPropagation();
             });

            _q = $q;
            $scope.chartHeight = chartHeight;
            $scope.chartWidth = chartWidth;
            $scope.tabHeight = tabHeight;

            $scope.selectedShipToName = 'C112126016';
            $scope.selectedMaterial = '5073027';
            $scope.selectedPrice = 80;
            $scope.selectedVolumne = 18;

            $scope.selectedSalesOrg = '';
            $scope.selectedPlant = '';
            $scope.selectedLookBack = '390';

            $scope.selectedSalesOrg2 = '';
            $scope.selectedPlant2 = '';
            $scope.selectedLookBack2 = '390';

            $scope.selectedSalesOrg3 = '';
            $scope.selectedPlant3 = '';
            $scope.selectedLookBack3 = '390';

            $scope.selectedSalesOrg4 = [];
            $scope.selectedPlant4 = [];
            $scope.selectedLookBack4 = '390';
            $scope.selectedIndustryCode = [];
            $scope.selectedCountry = [];
            $scope.selectedIncoterm = [];

            $scope.selectedSalesOrg5 = '';
            $scope.selectedPlant5 = '';
            $scope.selectedLookBack5 = '390';

            $scope.selectedSalesOrg6 = '';
            $scope.selectedPlant6 = '';
            $scope.selectedLookBack6 = '390';





            $scope.materialDataSet = [];

            $scope.salesOrgOptions = [];
            $scope.plantOptions = [];
            $scope.analyzedDataSet = [];
            $scope.analyzedDataSet2 = [];

            $scope.initialDataset = [];
            $scope.initialDataset2 = [];
            $scope.initialDataset4 = [];
            $scope.initDatasetSet = false;
            $scope.initSummaryDatasetSet= false;

            $scope.salesOrgOptions2 = [];
            $scope.plantOptions2 = [];

            $scope.salesOrgOptions3 = [];
            $scope.plantOptions3 = [];

            $scope.salesOrgOptions4 = [];
            $scope.plantOptions4 = [];

            $scope.salesOrgOptions5 = [];
            $scope.plantOptions5 = [];

            $scope.salesOrgOptions6 = [];
            $scope.plantOptions6 = [];
            $scope.analyzeDealClicked = false;

            $scope.isLookBackChanged = false;
            $scope.isLookBackChanged2 = false;
            $scope.isLookBackChanged3 = false;
            $scope.isLookBackChanged4 = false;
            $scope.isLookBackChanged5 = false;
            $scope.isLookBackChanged6 = false;

             $scope.isScatterProcessing = false;
             $scope.isLineProcessing = false;

             $scope.isLogarithmicScale = false;
             $scope.showPlanFilter = true;

             $scope.selectedIndex;

             $scope.onTabClick = function(flag){
                if(flag == '0'){
                     $scope.showPlanFilter = true;
                }
                else{
                    $scope.showPlanFilter = false;
                }
             }

             $scope.logarithmicScaleChange = function(chartNo, isLogarithmicScale){
                var _chartVar;
                if(chartNo == "1"){_chartVar = _chart1}
                else if(chartNo == "2"){_chartVar = _chart2;}
                else if(chartNo == "3"){_chartVar = _chart3;}
                else if(chartNo == "4"){_chartVar = _chart4;}
                else if(chartNo == "5"){_chartVar = _chart5;}
                else if(chartNo == "6"){_chartVar = _chart6;}

                if(isLogarithmicScale){
                    _chartVar.xAxis[0].update({
                        type: 'logarithmic'
                    });
                }else{
                    _chartVar.xAxis[0].update({
                        type: ''
                    });
                }
             }

             $scope.industryCodeOptions = {!industryCodeOptions};
             $scope.countryOptions = {!countryOptions};
             $scope.incotermOptions = {!incotermOptions};

             $scope.$watch(
                    "selectedLookBack",
                    function( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged = true;
                        }
                    }
             );
            $scope.$watch(
                    "selectedLookBack2",
                    function ( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged2 = true;
                        }
                    }
             );
            $scope.$watch(
                    "selectedLookBack3",
                    function ( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged3 = true;
                        }
                    }
             );
            $scope.$watch(
                    "selectedLookBack4",
                    function ( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged4 = true;
                        }
                    }
             );
            $scope.$watch(
                    "selectedLookBack5",
                    function ( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged5 = true;
                        }
                    }
             );
            $scope.$watch(
                    "selectedLookBack6",
                    function ( newValue, oldValue ) {
                        if(newValue!=oldValue){
                            $scope.isLookBackChanged6 = true;
                        }
                    }
             );

            $scope.getShipToNameSet = function(){
                //return prepareSet(mainDataSet,configData.shipToName);
                $scope.shipToNameCode =  {!shipToOptions};
                $scope.shipToNameList = [];
                $scope.shipToMap = {};
                for(var i=0;i< $scope.shipToNameCode.length;i++){
                    var shipToNameCodeStr =  $scope.shipToNameCode[i];
                    var shipToNameCodeArr = shipToNameCodeStr.split('@');
                    var shipName = shipToNameCodeArr[0];
                    var shipCode = shipToNameCodeArr[1];

                    $scope.shipToNameList.push(shipName);
                    $scope.shipToMap[shipName] = shipCode;
                }
                return $scope.shipToNameList;
            }

            $scope.getMaterialNumberSet = function(){
               
                $scope.materialToNameCode =  {!materialOptions};
                $scope.materialToNameList = [];
                $scope.materialToMap = {};
                for(var i=0;i< $scope.materialToNameCode.length;i++){
                    var materialToNameCodeStr =  $scope.materialToNameCode[i];
                    var materialToNameCodeArr = materialToNameCodeStr.split('@');
                    var materialName = materialToNameCodeArr[1];
                    var materialCode = materialToNameCodeArr[0];

                    $scope.materialToNameList.push(materialCode);
                    $scope.materialToMap[materialCode] = materialName;
                }
                return $scope.materialToNameList;
            }
            $scope.industryCodeMap = industryCodeMap;
            $scope.analyzeDealCommonAll = function(){
                $scope.isScatterProcessing = true;
                $scope.isLineProcessing = true;
                if(! $scope.initDatasetSet){
                    $scope.selectedLookBack4 = '390';
                }

                var _historicalDataPromise = getHistoricalDataset($scope.selectedMaterial, $scope.selectedLookBack4);
                var _historicalSummaryDataPromise = getHistoricalSummaryDataset($scope.selectedMaterial,$scope.selectedLookBack4);
                _historicalDataPromise.then(
                    function(_result){
                        $scope.isScatterProcessing = false;
                        $scope.isLineProcessing = false;
                        if(! $scope.initDatasetSet){
                             $scope.initDatasetSet = true;
                             $scope.initialDataset4 = _result;
                        }

                        var annualVolumePromise = getAnnualVolume($scope.selectedShipToName);
                        annualVolumePromise.then(function(_detailsLst){
                           if(_detailsLst && _detailsLst.length>1){
                                currentAnnualVolume =  _detailsLst[0];
                                currentDeliveryPriority =  _detailsLst[1];
                           }
                           $scope.analyzeDealCommon3(_result);
                           $scope.analyzeDealCommon4(_result);
                           $scope.analyzeDealCommon5(_result);
                        });

                        $scope.analyzeDealCommon(_result);
                        $scope.analyzeDealCommon2(_result);

                    }
                );
                _historicalSummaryDataPromise.then(function(_result2){
                    if(! $scope.initSummaryDatasetSet){
                             $scope.initSummaryDatasetSet = true;
                             $scope.initialSummaryDataset4 = _result2;
                    }
                    $scope.analyzeDealCommon6(_result2);
                });
            }

            $scope.analyzeDeal = function(){
                var isFormValid = $scope.projectForm.$invalid;
                if(isFormValid){
                    return;
                }

                $scope.analyzeDealCommonAll();
                $scope.analyzeDealClicked = true;

            }

            $scope.analyzeDealCommon = function(_dataset){
                var shipToSet = prepareSet(_dataset, configData.shipToName);
                var shipToExceptCurrent = shipToSet.splice(shipToSet.indexOf($scope.selectedShipToName),1);
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'ne', value : $scope.selectedShipToName });  //shipToSet

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawChartCommon(chartConfigScatter,_datasetNew,$scope.selectedVolumne, $scope.selectedPrice);
            }
             $scope.analyzeSummaryDealCommon = function(_dataset){
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'ne', value : $scope.selectedShipToName });

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawChartCommon(chartConfigChart6,_dataset,$scope.selectedVolumne, $scope.selectedPrice);

             }

            $scope.analyzeDealCommon2 = function(_dataset){
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'eq', value : $scope.selectedShipToName });

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawLineChart(_datasetNew,$scope.selectedVolumne, $scope.selectedPrice);
            }

            $scope.analyzeDealCommon3 = function(_dataset){
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'ne', value : $scope.selectedShipToName });

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawChartCommon(chartConfigChart3,_datasetNew,currentAnnualVolume, $scope.selectedPrice);
            }


            $scope.analyzeDealCommon4 = function(_dataset){
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'ne', value : $scope.selectedShipToName });

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawDeliveryChart(chartConfigChart4,_datasetNew,currentAnnualVolume, $scope.selectedPrice);
            }

            $scope.applyCommonFilter = function(_datasetNew,disablePlantFilter){

                $scope.setFilterOptionsFromListCommon(_datasetNew);

                if(checkString($scope.selectedSalesOrg4)){
                     _datasetNew = filterDataSet(_datasetNew,{property : configData.salesOrg, type:'in', value : $scope.selectedSalesOrg4});
                }
                if(!disablePlantFilter && checkString($scope.selectedPlant4)){
                     _datasetNew = filterDataSet(_datasetNew,{property : configData.plant, type:'in', value : $scope.selectedPlant4});
                }
                if(checkString($scope.selectedIndustryCode)){
                     _datasetNew = filterDataSet(_datasetNew,{property : 'industryCode', type:'in', value : $scope.selectedIndustryCode});
                }
                if(checkString($scope.selectedCountry)){
                     _datasetNew = filterDataSet(_datasetNew,{property : 'country', type:'in', value : $scope.selectedCountry});
                }
                if(checkString($scope.selectedIncoterm)){
                     _datasetNew = filterDataSet(_datasetNew,{property : 'incoterm', type:'in', value : $scope.selectedIncoterm});
                }
                return _datasetNew;
            }

            $scope.analyzeDealCommon5 = function(_dataset){
                var _datasetNew = filterDataSet(_dataset, {property : configData.shipToName, type:'ne', value : $scope.selectedShipToName });

                _datasetNew = $scope.applyCommonFilter(_datasetNew);

                drawBubbleChartCommon(chartConfigChart5,_datasetNew,$scope.selectedVolumne, $scope.selectedPrice);
            }

            $scope.analyzeDealCommon6 = function(_datasetNew){

                _datasetNew = $scope.applyCommonFilter(_datasetNew,true);

                //drawChartCommon
                drawSummaryChartSeries(chartConfigChart6,_datasetNew,$scope.selectedVolumne, $scope.selectedPrice);
            }

            $scope.setFilterOptionsFromList = function(_dataset){
                $scope.salesOrgOptions = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions = prepareSet(_dataset, configData.plant);
            }

            $scope.setFilterOptionsFromList2 = function(_dataset){
                $scope.salesOrgOptions2 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions2 = prepareSet(_dataset, configData.plant);
            }

            $scope.setFilterOptionsFromList3 = function(_dataset){
                $scope.salesOrgOptions3 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions3 = prepareSet(_dataset, configData.plant);
            }
            $scope.setFilterOptionsFromList4 = function(_dataset){
                $scope.salesOrgOptions4 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions4 = prepareSet(_dataset, configData.plant);
            }

            $scope.setFilterOptionsFromList5 = function(_dataset){
                $scope.salesOrgOptions5 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions5 = prepareSet(_dataset, configData.plant);
            }

            $scope.setFilterOptionsFromList6 = function(_dataset){
                $scope.salesOrgOptions6 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions6 = prepareSet(_dataset, configData.plant);
            }

             $scope.setFilterOptionsFromListCommon = function(_dataset){
                $scope.salesOrgOptions4 = prepareSet(_dataset, configData.salesOrg);
                $scope.plantOptions4 = prepareSet(_dataset, configData.plant);
            }


            $scope.applyFilter = function(){
                if($scope.isLookBackChanged){
                     $scope.isScatterProcessing = true;
                    var _historicalDataPromise = getHistoricalDataset($scope.selectedMaterial, $scope.selectedLookBack);
                    _historicalDataPromise.then(
                        function(_result){
                            $scope.isScatterProcessing = false;
                            $scope.analyzedDataSet = _result;
                            $scope.analyzeDealCommon(_result);
                            $scope.isLookBackChanged = false;

                        }
                    );
                }
                else{
                     $scope.analyzeDealCommon($scope.analyzedDataSet);
                }

            }


            $scope.applyFilter2 = function(){
                if($scope.isLookBackChanged2){
                     $scope.isLineProcessing = true;
                    var _historicalDataPromise = getHistoricalDataset($scope.selectedMaterial, $scope.selectedLookBack2);
                    _historicalDataPromise.then(
                        function(_result){
                             $scope.isLineProcessing = false;
                            $scope.analyzedDataSet2 = _result;
                            $scope.analyzeDealCommon2(_result);
                            $scope.isLookBackChanged2 = false;

                        }
                    );
                }
                else{
                     $scope.analyzeDealCommon2($scope.analyzedDataSet2);
                }
            }

            $scope.applyFilter3 = function(){
                if($scope.isLookBackChanged3){
                     $scope.isScatterProcessing = true;
                    var _historicalDataPromise = getHistoricalDataset($scope.selectedMaterial, $scope.selectedLookBack3);
                    _historicalDataPromise.then(
                        function(_result){
                            $scope.isScatterProcessing = false;
                            $scope.analyzedDataSet3 = _result;
                            $scope.analyzeDealCommon3(_result);
                            $scope.isLookBackChanged3 = false;

                        }
                    );
                }
                else{
                     $scope.analyzeDealCommon3($scope.analyzedDataSet3);
                }

            }

            $scope.applyFilter4 = function(){
               $scope.analyzeDealCommonAll();
            }

             $scope.applyFilter5 = function(){
                if($scope.isLookBackChanged5){
                     $scope.isScatterProcessing = true;
                    var _historicalDataPromise = getHistoricalDataset($scope.selectedMaterial, $scope.selectedLookBack5);
                    _historicalDataPromise.then(
                        function(_result){
                            $scope.isScatterProcessing = false;
                            $scope.analyzedDataSet5 = _result;
                            $scope.analyzeDealCommon5(_result);
                            $scope.isLookBackChanged = false;

                        }
                    );
                }
                else{
                     $scope.analyzeDealCommon5($scope.analyzedDataSet5);
                }

            }

             $scope.applyFilter6 = function(){
                if($scope.isLookBackChanged6){
                     $scope.isScatterProcessing = true;
                    var _historicalDataPromise = getHistoricalSummaryDataset($scope.selectedMaterial, $scope.selectedLookBack6);
                    _historicalDataPromise.then(
                        function(_result){
                            $scope.isScatterProcessing = false;
                            $scope.analyzedDataSet6 = _result;
                            $scope.analyzeDealCommon6(_result);
                            $scope.isLookBackChanged = false;

                        }
                    );
                }
                else{
                     $scope.analyzeDealCommon6($scope.analyzedDataSet6);
                }
            }




            $scope.resetFilter = function(){
                $scope.selectedSalesOrg = '';
                $scope.selectedPlant = '';
                $scope.selectedLookBack = '30';
                 $scope.analyzeDealCommon($scope.initialDataset);

            }

            $scope.resetFilter2 = function(){
                $scope.selectedSalesOrg2 = '';
                $scope.selectedPlant2 = '';
                $scope.selectedLookBack2 = '30';
                $scope.analyzeDealCommon2($scope.initialDataset2);

            }
            $scope.resetFilter3 = function(){
                $scope.selectedSalesOrg3 = '';
                $scope.selectedPlant3 = '';
                $scope.selectedLookBack3 = '30';
                $scope.analyzeDealCommon3($scope.initialDataset2);

            }

            $scope.resetFilter4 = function(){
                $scope.selectedSalesOrg4 = [];
                $scope.selectedPlant4 = [];
                $scope.selectedLookBack4 = '30';
                $scope.selectedIndustryCode=[];
                $scope.selectedCountry = [];
                $scope.selectedIncoterm = [];
                //$scope.analyzeDealCommon4($scope.initialDataset4);
                $scope.analyzeDealCommon3($scope.initialDataset4);
                $scope.analyzeDealCommon4($scope.initialDataset4);
                $scope.analyzeDealCommon5($scope.initialDataset4);
                $scope.analyzeDealCommon($scope.initialDataset4);
                $scope.analyzeDealCommon2($scope.initialDataset4);

                $scope.analyzeDealCommon6( $scope.initialSummaryDataset4);

            }

            $scope.resetFilter5 = function(){
                $scope.selectedSalesOrg5 = '';
                $scope.selectedPlant5 = '';
                $scope.selectedLookBack5 = '30';
                $scope.analyzeDealCommon5($scope.initialDataset5);
            }
            $scope.resetFilter6 = function(){
                $scope.selectedSalesOrg6 = '';
                $scope.selectedPlant6 = '';
                $scope.selectedLookBack6 = '30';
                $scope.analyzeDealCommon6($scope.initialDataset6);
            }

            $scope.onShipToChange = function(){
                selectedShipToName = $scope.selectedShipToName;
                console.log('selectedShipToName:',selectedShipToName)
            }



            $scope.shipToNameSet = $scope.getShipToNameSet();
            $scope.materialNumberSet = $scope.getMaterialNumberSet();

            $scope.goBack = function(){
                window.top.location = '/home/home.jsp';
            }

             angular.element(document).ready(function () {
                 $scope.applyFilter4();
            });

        }

        myApp.controller('AppController',AppController);

        </script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
        <apex:stylesheet value="{!$Resource.APTSMD_ApttusCustomCss}" />
    </head>
    <body ng-controller="AppController" layout="column" ng-cloak="true">
        <c:APTSMD_CommonHeader pageName1="Deal Maximizer" objectName="Contextual Pricing Analysis" iconName="account" type="standard"/>
        <div class="apttusContainer moved">
            <div class="apttusPanel">
                <div>
                    <form name="projectForm" ng-submit="analyzeDeal()">
                        <div layout="row" layout-align="center center">
                            <div flex="15" class="input-container header-first fontSize18px" layout="row" layout-align="start center">
                                <h4 class="fontSize14px">
                                    Current Line Item
                                </h4>
                            </div>
                            <div class="input-container header-field" flex="15">
                                <md-input-container class="input-container-dir fontSize14px">
                                    <label class="input-label ands-label"><apex:outputText value="{!$Label.APTSMD_Scatterplot_Customer_Name}" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedShipToName" required="true" ng-change="onShipToChange()">
                                        <md-select-header class="demo-select-header">
                                            <input ng-model="searchTerm"
                                                   type="search"
                                                   placeholder="Search for a {!$Label.APTSMD_Scatterplot_Customer_Name}.."
                                                   class="demo-header-searchbox md-text" />
                                        </md-select-header>
                                        <md-optgroup label="shipTo">

                                            <md-option value="{{shipToName}}" ng-repeat="shipToName in shipToNameSet | filter:searchTerm">{{shipToMap[shipToName]}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>
                            <div class="input-container header-field" flex="15">
                                <md-input-container class="input-container-dir  ands-input-container fontSize14px">
                                    <label class="input-label"><apex:outputText value="{!$Label.APTSMD_Scatterplot_Product}" /></label>
                                    <md-select ng-model="selectedMaterial" required="true">
                                        <md-select-header class="demo-select-header">
                                            <input ng-model="searchTerm2"
                                                   type="search"
                                                   placeholder="Search for a {!$Label.APTSMD_Scatterplot_Product}.."
                                                   class="demo-header-searchbox md-text" />
                                        </md-select-header>
                                        <md-optgroup label="Product Id">
                                            <md-option ng-value="{{material}}" ng-repeat="material in materialNumberSet | filter:searchTerm2">{{materialToMap[material]}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>
                            <div class="input-container header-field marginBottom5" flex="15">
                                <md-input-container class="input-container-dir fontSize14px">
                                    <label class="input-label">Price (Per Unit) (Euro)</label>
                                    <input type="number" step="any" name="selectedPrice" ng-model="selectedPrice" required="true" tooltip="" />
                                </md-input-container>
                            </div>
                            <div class="input-container header-field marginBottom5" flex="15">
                                <md-input-container class="input-container-dir fontSize14px">
                                    <label class="input-label">Quantity </label>
                                    <input type="number" step="any" name="selectedVolumne" ng-model="selectedVolumne" required="true" tooltip="" />
                                </md-input-container>
                            </div>
                            <div class="input-container header-button" flex="25" layout="row" layout-align="end center">
                                <md-button type="submit" class="apttusBtn marginRight10">Analyze Deal</md-button>
                                <md-button class="apttusBtnWhite marginRight10 slds-button slds-button--brand" ng-click="goBack()">Back</md-button>
                            </div>
                        </div>
                    </form>
                </div>
                <div style="border-bottom: 3px rgba(156, 158, 168, 0.34) solid;width: 100%"></div>
                <div layout="row">
                    <div flex="20" class="filter-container paddingTop10" layout="column">
                        <div style="min-height: {{chartHeight}}px;" layout="column" layout-align="space-around stretch">
                            <div class="filter-field" flex="10">
                                Data Filters
                                <br />
                            </div>

                            <div class="filter-field" flex="10">
                                <md-input-container class="input-container-dir fontSize14px" ng-show="showPlanFilter">
                                    <label class="input-label">Look back period</label>
                                    <md-select class="fontSize14px" ng-model="selectedLookBack4">
                                        <md-option value="Any">All</md-option>
                                        <md-option value="30">Last 30 days</md-option>
                                        <md-option value="60">Last 60 days</md-option>
                                        <md-option value="90">Last 90 days</md-option>
                                        <md-option value="180">Last 180 days</md-option>
                                        <md-option value="360">Last 12 months</md-option>
                                        <md-option value="390">Last 13 months</md-option>
                                        <md-option value="998">Month to Date</md-option>
                                        <md-option value="999">Year to Date</md-option>
                                    </md-select>
                                </md-input-container>
                                <md-input-container class="input-container-dir fontSize14px" ng-show="!showPlanFilter">
                                    <label class="input-label">Look back period</label>
                                    <md-select class="fontSize14px" ng-model="selectedLookBack4">
                                        <md-option value="Any">All</md-option>
                                        <md-option value="30">Last month</md-option>
                                        <md-option value="60">Last 2 months</md-option>
                                        <md-option value="90">Last 3 months</md-option>
                                        <md-option value="180">Last 6 months</md-option>
                                        <md-option value="360">Last 12 months</md-option>
                                        <md-option value="390">Last 13 months</md-option>
                                        <md-option value="998">Month to Date</md-option>
                                        <md-option value="999">Year to Date</md-option>

                                    </md-select>
                                </md-input-container>
                            </div>
                            <div class="filter-field" flex="10">
                                <md-input-container class="md-block ands-input-container input-container-dir fontSize14px">
                                    <label class="ands-label fontSize14px"><apex:outputText value="{!$Label.APTSMD_Scatterplot_First_Filter}" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedSalesOrg4" multiple="true">
                                        <md-optgroup class="fontSize14px" label="{!$Label.APTSMD_Scatterplot_First_Filter}">
                                            <md-option ng-repeat="salesOrg in salesOrgOptions4" ng-value="salesOrg">{{salesOrg}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>

                            <div class="filter-field" flex="10">
                                <md-input-container class="md-block ands-input-container input-container-dir fontSize14px">
                                    <label class="ands-label fontSize14px"><apex:outputText value="Industry Code" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedIndustryCode" multiple="true">
                                        <md-optgroup class="fontSize14px" label="Industry Code">
                                            <md-option ng-repeat="industryCode in industryCodeOptions" ng-value="industryCode">{{industryCodeMap[industryCode]}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>
                            <div class="filter-field" flex="10">
                                <md-input-container class="md-block ands-input-container input-container-dir fontSize14px">
                                    <label class="ands-label fontSize14px"><apex:outputText value="Country" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedCountry" multiple="true">
                                        <md-optgroup class="fontSize14px" label="Country">
                                            <md-option ng-repeat="country in countryOptions" ng-value="country">{{country}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>

                            <div class="filter-field" flex="10">
                                <md-input-container class="md-block ands-input-container input-container-dir fontSize14px">
                                    <label class="ands-label fontSize14px"><apex:outputText value="Incoterm" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedIncoterm" multiple="true">
                                        <md-optgroup class="fontSize14px" label="Incoterm">
                                            <md-option ng-repeat="incoterm in incotermOptions" ng-value="incoterm">{{incoterm}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>
                            <div class="filter-field" flex="10">
                                <md-input-container class="md-block ands-input-container input-container-dir fontSize14px">
                                    <label class="ands-label fontSize14px"><apex:outputText value="{!$Label.APTSMD_Scatterplot_Second_Filter}" /></label>
                                    <md-select class="fontSize14px" ng-model="selectedPlant4" multiple="true" ng-disabled="!showPlanFilter">
                                        <md-optgroup class="fontSize14px" label="{!$Label.APTSMD_Scatterplot_Second_Filter}">
                                            <md-option ng-repeat="plant in plantOptions4" ng-value="plant">{{plant}}</md-option>
                                        </md-optgroup>
                                    </md-select>
                                </md-input-container>
                            </div>
                            <div layout="row" class="filter-field" layout-align="end center" flex="10">
                                <div></div>
                                <div>
                                    <md-button md-no-ink="" class="apttusBtnWhite marginRight10 slds-button slds-button--brand" ng-click="resetFilter4()">Reset Filters</md-button>
                                </div>
                                <div>
                                    <md-button class="apttusBtn" ng-click="applyFilter4()">Apply</md-button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div flex="80">
                        <md-tabs md-dynamic-height="" md-border-bottom="" style="min-height : {{tabHeight}}px" md-selected="selectedIndex">
                            <md-tab label="Historical Sales to This Customer" ng-click="onTabClick('0')">
                                <md-content class="md-padding">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_line" class="chart-div line-chart" ng-show="!isLineProcessing"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="false && analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale1" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('1',isLogarithmicScale1)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isLineProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                            <md-tab label="Sales to Similar Customer" ng-click="onTabClick('0')">
                                <md-content class="md-padding" style="min-height: {{chartHeight}}px;">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_div" class="chart-div scatter-chart" ng-show="!isScatterProcessing"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale2" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('2',isLogarithmicScale2)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isScatterProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                            <md-tab label="Scatter Plot - Price and Annual Volume" ng-click="onTabClick('0')">
                                <md-content class="md-padding">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_3" class="chart-div line-chart" ng-show="!isLineProcessing"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale3" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('3',isLogarithmicScale3)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isLineProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                            <md-tab label="Scatter Plot - By Delivery priority" ng-click="onTabClick('0')">
                                <md-content class="md-padding">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_4" class="chart-div line-chart" ng-show="!isLineProcessing"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale4" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('4',isLogarithmicScale4)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isLineProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                            <md-tab label="Bubble Chart - Price and Annual Volume " ng-click="onTabClick('0')">
                                <md-content class="md-padding">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_5" class="chart-div line-chart" ng-show="!isLineProcessing"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale5" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('5',isLogarithmicScale5)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isLineProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                            <md-tab label="Scatter Chart - Average Price and total Quantity" ng-click="onTabClick('1')">
                                <md-content class="md-padding">
                                    <div layout="row" layout-align="center center">
                                        <div>
                                            <div id="chart_6" class="chart-div line-chart"></div>
                                            <div class="filter-field" layout="row" layout-align="center center" ng-show="analyzeDealClicked && !isLineProcessing">
                                                <md-checkbox ng-model="isLogarithmicScale6" aria-label="Logarithmic Scale" ng-change="logarithmicScaleChange('6',isLogarithmicScale6)">
                                                    Logarithmic Scale
                                                </md-checkbox>
                                            </div>
                                            <div ng-show="isLineProcessing" layout="row" layout-align="center center">
                                                <md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular>
                                            </div>
                                        </div>
                                    </div>
                                </md-content>
                            </md-tab>
                        </md-tabs>
                    </div>
                </div>
            </div>
        </div>
        <script type="text/javascript">
            (function (H) {
                // Pass error messages
                H.Axis.prototype.allowNegativeLog = true;
            }(Highcharts));


            var drawDeliveryChart = function(_chartConfig,dataset,currentX,currentY){
                console.log('drawDeliveryChart**currentX:',currentX)
                var xSet = [];
                var ySet = [];
                var tooltipSet = [];
                var combinedata = [];
                var series = [];
                var seriesMap = {};
                var _tooltipMap = {};

                var seriesConfigMap = {
                    0 : {
                        name : "Priority 0",
                        color:'rgb(0,128,255)'
                    },
                    10 : {
                        name : "Priority 10",
                        color:'rgb(255,0,0)'
                    },
                    20 : {
                        name : "Priority 20",
                        color:'rgb(128,0,128)'
                    },
                    30 : {
                        name : "Priority 30",
                        color:'rgb(0,128,0)'
                    },
                    40 : {
                        name : "Priority 40",
                        color:'rgb(165,42,42)'
                    },
                    50 : {
                        name : "Priority 50",
                        color:'rgb(0,0,0)'
                    }
                }

                for(var i=0;i<dataset.length;i++){
                    if(_chartConfig.isAxisWiseArray){
                        xSet.push(dataset[i][_chartConfig.xProperty]);
                        ySet.push(dataset[i][_chartConfig.yProperty]);
                        tooltipSet.push(_chartConfig.tooltipFn(dataset[i]));
                    }else{
                        var key = dataset[i][configData.deliveryPriority];
                        if(!seriesMap[key]){
                            seriesMap[key] = [];
                        }
                        var _xVal = dataset[i][_chartConfig.xProperty];
                        var _yVal = dataset[i][_chartConfig.yProperty];
                        var xVal = _xVal && _xVal>0 ? _xVal : 0;
                        var yVal = _yVal && _yVal>0? _yVal : 0;
                        _tooltipMap[xVal+'~'+yVal]=_chartConfig.tooltipFn(dataset[i]);
                        seriesMap[key].push([xVal,yVal]);


                    }
                }
                angular.forEach(seriesMap, function(seriesData,seriesName){
                    series.push({
                        name: seriesConfigMap[seriesName].name,
                        color: seriesConfigMap[seriesName].color,
                        data: seriesData
                    });
                });
                series.push({name:'Current', color : "rgb(255,128,0)", data : [[currentX, currentY]]});

                var currentItem = {};
                currentItem[_chartConfig.xProperty] = currentX;
                currentItem[_chartConfig.yProperty] = currentY;
                currentItem[configData.shipToName] = selectedShipToName;
                currentItem[configData.deliveryPriority] = currentDeliveryPriority;
                _tooltipMap[currentX+'~'+currentY] =_chartConfig.tooltipFn(currentItem);

                _chartConfig.tooltipMap = _tooltipMap;
                //drawPlotify(_chartConfig,xSet,ySet,tooltipSet,currentX,currentY);
                // drawHighChart(_chartConfig,combinedata,currentX,currentY);
                drawSeriesHighChart(_chartConfig,series,currentX,currentY,4);

            }


            var drawSummaryChartSeries = function(_chartConfig,dataset,currentX,currentY){
                var xSet = [];
                var ySet = [];
                var tooltipSet = [];
                var combinedata = [];
                var series = [];
                var seriesMap = {};
                var _tooltipMap = {};

                var seriesConfigMap = {
                    1 : {
                        name : "Historical",
                        color:'rgb(0,128,255)'
                    },
                    0 : {
                        name : "This Customer",
                        color:'rgb(255,0,0)'
                    }
                }
                seriesMap['0'] = [];
                seriesMap['1'] = [];
                for(var i=0;i<dataset.length;i++){
                    if(_chartConfig.isAxisWiseArray){
                        xSet.push(dataset[i][_chartConfig.xProperty]);
                        ySet.push(dataset[i][_chartConfig.yProperty]);
                        tooltipSet.push(_chartConfig.tooltipFn(dataset[i]));
                    }else{
                        var _xVal = dataset[i][_chartConfig.xProperty];
                        var _yVal = dataset[i][_chartConfig.yProperty];
                        var xVal = _xVal && _xVal>0 ? _xVal : 0;
                        var yVal = _yVal && _yVal>0? _yVal : 0;
                        _tooltipMap[xVal+'~'+yVal]=_chartConfig.tooltipFn(dataset[i]);
                        if(dataset[i][configData.shipToName] == selectedShipToName){
                            seriesMap['0'].push([xVal,yVal]);
                        }
                        else{
                            seriesMap['1'].push([xVal,yVal]);
                        }

                    }
                }
                angular.forEach(seriesMap, function(seriesData,seriesName){
                    series.push({
                        name: seriesConfigMap[seriesName].name,
                        color: seriesConfigMap[seriesName].color,
                        data: seriesData
                    });
                });
                series.push({name:'Current', color : "rgb(255,128,0)", data : [[currentX, currentY]]});

                var currentItem = {};
                currentItem[_chartConfig.xProperty] = currentX;
                currentItem[_chartConfig.yProperty] = currentY;
                currentItem[configData.shipToName] = selectedShipToName;
                _tooltipMap[currentX+'~'+currentY] =_chartConfig.tooltipFn(currentItem);

                _chartConfig.tooltipMap = _tooltipMap;
                drawSeriesHighChart(_chartConfig,series,currentX,currentY,6);

            }

            var drawChartCommon = function(_chartConfig,dataset,currentX,currentY){
                var xSet = [];
                var ySet = [];
                var tooltipSet = [];
                var combinedata = [];
                var combinedata = [];
                var _tooltipMap = {};

                for(var i=0;i<dataset.length;i++){
                    if(_chartConfig.isAxisWiseArray){
                        xSet.push(dataset[i][_chartConfig.xProperty]);
                        ySet.push(dataset[i][_chartConfig.yProperty]);
                        tooltipSet.push(_chartConfig.tooltipFn(dataset[i]));
                    }else{
                        var _xVal = dataset[i][_chartConfig.xProperty];
                        var _yVal = dataset[i][_chartConfig.yProperty];
                        var xVal = _xVal && _xVal>0 ? _xVal : 0;
                        var yVal = _yVal && _yVal>0? _yVal : 0;
                        _tooltipMap[xVal+'~'+yVal]=_chartConfig.tooltipFn(dataset[i]);
                        combinedata.push([xVal,yVal]);
                    }
                }

                //drawPlotify(_chartConfig,xSet,ySet,tooltipSet,currentX,currentY);
                var currentItem = {};
                currentItem[_chartConfig.xProperty] = currentX;
                currentItem[_chartConfig.yProperty] = currentY;
                currentItem[configData.shipToName] = selectedShipToName;
                _tooltipMap[currentX+'~'+currentY] =_chartConfig.tooltipFn(currentItem);

                _chartConfig.tooltipMap = _tooltipMap;
                drawHighChart(_chartConfig,combinedata,currentX,currentY);

            }
            var drawBubbleChartCommon = function(_chartConfig,dataset,currentX,currentY){
                var xSet = [];
                var ySet = [];
                var tooltipSet = [];
                var combinedata = [];
                var combinedata = [];
                var _tooltipMap = {};

                for(var i=0;i<dataset.length;i++){
                    var _xVal = dataset[i][_chartConfig.xProperty];
                    var _yVal = dataset[i][_chartConfig.yProperty];
                    var _zVal = dataset[i][_chartConfig.bubbleProperty];
                    var xVal = _xVal && _xVal>0 ? _xVal : 0;
                    var yVal = _yVal && _yVal>0? _yVal : 0;
                    var zVal = _zVal && _zVal>0? _zVal : 0;
                    _tooltipMap[xVal+'~'+yVal]=_chartConfig.tooltipFn(dataset[i]);

                    combinedata.push([xVal,yVal,zVal]);
                }

                var currentItem = {};
                currentItem[_chartConfig.xProperty] = currentX;
                currentItem[_chartConfig.yProperty] = currentY;
                currentItem[configData.shipToName] = selectedShipToName;
                currentItem[configData.annualVolume] = currentAnnualVolume;

                _tooltipMap[currentX+'~'+currentY] =_chartConfig.tooltipFn(currentItem);

                _chartConfig.tooltipMap = _tooltipMap;

                drawBubbleHighChart(_chartConfig,combinedata,currentX,currentY,currentAnnualVolume);

            }

            function drawChart(dataset, currentQuantity,currentPrice){
            }
            function drawSummaryChart(dataset, currentQuantity,currentPrice){
                drawChartCommon(chartConfigChart6,dataset, currentQuantity,currentPrice);
            }

            function drawHighChart(_chartConfig,combinedata,currentX,currentY){
                var _chartVar = Highcharts.chart(_chartConfig.container, {
                    tooltip: {
                        formatter: function () {
                            return _chartConfig.tooltipMap[this.x+'~'+this.y];
                        },
                        positioner: function (w,h,p) {
                            return { x: p.plotX+100, y: p.plotY+30};
                        }
                    },
                    chart: {
                        type: 'scatter',
                        zoomType: 'xy',
                        height:chartHeight,
                        width : chartWidth
                    },
                    title: {
                        text: _chartConfig.title
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        title: {
                            enabled: true,
                            text: _chartConfig.xTitle
                        },
                        startOnTick: true,
                        endOnTick: true,
                        showLastLabel: true,
                        type: ''
                    },
                    yAxis: {
                        title: {
                            text: _chartConfig.yTitle
                        },
                        minRange: 0,
                        min:0
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        x: -30,
                        y: 0,
                        floating: true,
                        backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',
                        borderWidth: 1
                    },
                    plotOptions: {
                        scatter: {
                            marker: {
                                radius: 6,
                                states: {
                                    hover: {
                                        enabled: true,
                                        lineColor: 'rgb(100,100,100)'
                                    }
                                }
                            },
                            states: {
                                hover: {
                                    marker: {
                                        enabled: false
                                    }
                                }
                            }
                        }
                    },
                    series: [{
                        name: 'Historical',
                        color: 'rgb(0,128,255)',
                        data: combinedata
                    },{
                        name: 'Current',
                        color: 'rgb(255,128,0)',
                        data: [[currentX,currentY]]
                    }]
                });

                var chartNo = _chartConfig.chartNo;
                if(chartNo == 2){
                    _chart2  = _chartVar;
                }else if(chartNo == 3){
                    _chart3  = _chartVar;
                }
                else if(chartNo == 6){
                    _chart6  = _chartVar;
                }
            }

            function drawBubbleHighChart(_chartConfig,combinedata,currentX,currentY,currentAnnualVolume){
                _chart5 = Highcharts.chart(_chartConfig.container, {
                    tooltip: {
                        formatter: function () {
                            return _chartConfig.tooltipMap[this.x+'~'+this.y];
                        },
                        positioner: function (w,h,p) {
                            return { x: p.plotX+100, y: p.plotY+30};
                        }
                    },
                    chart: {
                        type: 'bubble',
                        zoomType: 'xy',
                        height:chartHeight,
                        width : chartWidth
                    },
                    title: {
                        text: _chartConfig.title
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        title: {
                            enabled: true,
                            text: _chartConfig.xTitle
                        },
                        startOnTick: true,
                        endOnTick: true,
                        showLastLabel: true,
                        type: ''
                    },
                    yAxis: {
                        title: {
                            text: _chartConfig.yTitle
                        },
                        minRange: 0,
                        min:0
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        x: -30,
                        y: 0,
                        floating: true,
                        backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',
                        borderWidth: 1
                    },
                    plotOptions: {
                        scatter: {
                            marker: {
                                radius: 5,
                                states: {
                                    hover: {
                                        enabled: true,
                                        lineColor: 'rgb(100,100,100)'
                                    }
                                }
                            },
                            states: {
                                hover: {
                                    marker: {
                                        enabled: false
                                    }
                                }
                            }
                        }
                    },
                    series: [{
                        name: 'Historical',
                        color: 'rgb(0,128,255)',
                        data: combinedata
                    },{
                        name: 'Current',
                        color: 'rgb(255,128,0)',
                        data: [[currentX,currentY,currentAnnualVolume]]
                    }]
                });
            }


            function drawSeriesHighChart(_chartConfig,series,currentX,currentY,chartNo){
                var _chartVar = Highcharts.chart(_chartConfig.container, {
                    tooltip: {
                        formatter: function () {
                            return _chartConfig.tooltipMap[this.x+'~'+this.y];
                        },
                        positioner: function (w,h,p) {
                            return { x: p.plotX+100, y: p.plotY+30};
                        }
                    },
                    chart: {
                        type: 'scatter',
                        zoomType: 'xy',
                        height:chartHeight,
                        width : chartWidth
                    },
                    title: {
                        text: _chartConfig.title
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        title: {
                            enabled: true,
                            text: _chartConfig.xTitle
                        },
                        startOnTick: true,
                        endOnTick: true,
                        showLastLabel: true,
                        type: ''
                    },
                    yAxis: {
                        title: {
                            text: _chartConfig.yTitle
                        },
                        minRange: 0,
                        min:0
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        x: -30,
                        y: 0,
                        floating: true,
                        backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',
                        borderWidth: 1
                    },
                    plotOptions: {
                        scatter: {
                            marker: {
                                radius: 6,
                                states: {
                                    hover: {
                                        enabled: true,
                                        lineColor: 'rgb(100,100,100)'
                                    }
                                }
                            },
                            states: {
                                hover: {
                                    marker: {
                                        enabled: false
                                    }
                                }
                            }
                        }
                    },
                    series: series
                });

                if(chartNo == 4){
                    _chart4 = _chartVar;
                }
                else if(chartNo == 6){
                    _chart6 = _chartVar;
                }
            }






            var drawLineChartCommon = function(_chartConfig,dataset){
                var xSet = [];
                var ySet = [];
                var ySet2 = [];
                var combinedata = [];

                dataset.sort(function(a,b){
                    var dateStr1 = a[configData.priceDate];
                    var dateStr2 = b[configData.priceDate];
                    var dateArr1 = dateStr1.split("-");
                    var dateArr2 = dateStr2.split("-");
                    var date1 = new Date(dateArr1[2],dateArr1[1]-1,dateArr1[0]);
                    var date2 = new Date(dateArr2[2],dateArr2[1]-1,dateArr2[0]);

                    return date1 - date2;
                });

                for(var i=0;i<dataset.length;i++){
                    if(_chartConfig.isAxisWiseArray){
                        xSet.push(dataset[i][configData.priceDate]);
                        ySet.push(dataset[i][configData.price]);
                        ySet2.push(dataset[i][configData.quantity]);
                    }
                }

                drawHighLineChart(_chartConfig,xSet,ySet,ySet2);

            }


            function drawLineChart(dataset){
                drawLineChartCommon(chartConfigTime,dataset);
            }



            function drawHighLineChart(_chartConfig,xSet,ySet,ySet2){
                chart_1 = Highcharts.chart(_chartConfig.container, {
                    chart: {
                        zoomType: 'xy',
                        width:chartWidth,
                        height:chartHeight
                    },
                    title: {
                        text: 'Price Performance for This Customer '
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: [{
                        categories: xSet,
                        crosshair: true,
                        title: {
                            enabled: true,
                            text: _chartConfig.xTitle
                        },
                    }],
                    yAxis: [{ // Primary yAxis
                        labels: {
                            format: '${value}',
                            style: {
                                color: Highcharts.getOptions().colors[1]
                            }
                        },
                        title: {
                            text: 'Price Per Unit (Euros)',
                            style: {
                                color: Highcharts.getOptions().colors[1]
                            }
                        },
                        min:0
                    }, {
                        title: {
                            text: 'Order Quantity ',
                            style: {
                                color: Highcharts.getOptions().colors[0]
                            }
                        },
                        labels: {
                            format: '{value}',
                            style: {
                                color: Highcharts.getOptions().colors[0]
                            }
                        },
                        opposite: true
                    }],
                    tooltip: {
                        positioner: function (w,h,p) {
                            return { x: p.plotX+100, y: p.plotY+30};
                        }
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'top',
                        x: -30,
                        y: 0,
                        floating: true,
                        backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
                    },
                    series: [
                       {
                           name: 'Order Quantity  ',
                           type: 'column',
                           yAxis: 1,
                           data: ySet2,
                           tooltip: {
                               valueSuffix: ''
                           }

                       },
                     {
                         name: 'Price Per Unit(Euros)',
                         type: 'spline',
                         data: ySet,
                         tooltip: {
                             valuePrefix: '$'
                         }
                     }
                    ]
                });

            }
        </script>
    </body>
</html>
</apex:page>